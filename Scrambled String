Given two strings S1 and S2 of equal length, the task is to determine if S2 is a scrambled form of S1.

Scrambled string: Given string str, we can represent it as a binary tree by partitioning it into two non-empty substrings recursively.
Below is one possible representation of str = coder:
 
To scramble the string, we may choose any non-leaf node and swap its two children. 
Suppose, we choose the node co and swap its two children, it produces a scrambled string ocder.
Similarly, if we continue to swap the children of nodes der and er, it produces a scrambled string ocred.

Note: Scrambled string is not the same as an Anagram.

Print "Yes" if S2 is a scrambled form of S1 otherwise print "No".

Example 1:

Input: S1="coder", S2="ocder"
Output: Yes
Explanation: ocder is a scrambled 
form of coder.

    ocder
   /    \
  oc    der
 / \    
o   c  

As "ocder" can represent it 
as a binary tree by partitioning 
it into two non-empty substrings.
We just have to swap 'o' and 'c' 
to get "coder".



def isScramble(S1, S2):
    if len(S1) != len(S2):
        return False

    if S1 == S2:
        return True

    n = len(S1)
    
    # Check if characters are anagrams
    if sorted(S1) != sorted(S2):
        return False

    for i in range(1, n):
        if (isScramble(S1[:i], S2[:i]) and isScramble(S1[i:], S2[i:])) or \
           (isScramble(S1[:i], S2[-i:]) and isScramble(S1[i:], S2[:-i])):
            return True

    return False

# Example
S1 = "coder"
S2 = "ocder"
if isScramble(S1, S2):
    print("Yes")
else:
    print("No")
